{"version":3,"sources":["webpack://React-Selectable-Fast/webpack/universalModuleDefinition","webpack://React-Selectable-Fast/webpack/bootstrap","webpack://React-Selectable-Fast/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://React-Selectable-Fast/./src/utils/castTouchToMouseEvent.ts","webpack://React-Selectable-Fast/./src/utils/getBoundsForNode.ts","webpack://React-Selectable-Fast/./src/utils/doObjectsCollide.ts","webpack://React-Selectable-Fast/./src/utils/nodeInRoot.ts","webpack://React-Selectable-Fast/./src/utils/index.ts","webpack://React-Selectable-Fast/./src/Context.ts","webpack://React-Selectable-Fast/./src/Selectbox.tsx","webpack://React-Selectable-Fast/./src/SelectableGroup.tsx","webpack://React-Selectable-Fast/./src/utils/detectMouseButton.ts","webpack://React-Selectable-Fast/./src/CreateSelectable.tsx","webpack://React-Selectable-Fast/./src/SelectAll.tsx","webpack://React-Selectable-Fast/./src/DeselectAll.tsx","webpack://React-Selectable-Fast/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","propertiesToNormalize","patchEventProperties","evt","touchKey","forEach","castTouchToMouseEvent","type","includes","err","alert","message","getBoundsForNode","node","containerScroll","arguments","length","undefined","scrollTop","scrollLeft","_getDocumentScroll","documentScrollTop","Math","max","pageYOffset","document","documentElement","body","documentScrollLeft","pageXOffset","rect","getBoundingClientRect","top","left","offsetWidth","offsetHeight","width","height","areBoundsCollide","a","b","_ref","_ref$tolerance","tolerance","_ref$useOffsetSize","useOffsetSize","aHeight","bHeight","aWidth","bWidth","doObjectsCollide","delta","aObj","HTMLElement","bObj","isNodeInRoot","parentNode","noop","SelectableGroupContext","React","createContext","selectable","register","_","unregister","selectAll","clearSelection","getScrolledContainer","Selectbox","y","x","isSelecting","_this","selectbox","ref","Component","_this$props","this","props","fixedPosition","className","boxStyle","state","zIndex","position","cursor","external_root_React_commonjs2_react_commonjs_react_amd_react_default","createElement","getSelectboxRef","style","SelectableGroup","selectionMode","selectboxY","selectboxX","target","Set","Map","ignoreList","concat","scrollContainer","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","registry","values","iterator","next","done","registerSelectable","selectableItem","add","isSelected","selectedItems","selectingItems","onSelectionFinish","_toConsumableArray","checkScrollTop","clientY","checkScrollBottom","checkScrollLeft","clientX","checkScrollRight","offset","minimumSpeedFactor","scrollSpeed","currentTop","scrollBounds","getScrollStep","bottom","innerHeight","newTop","min","maxScrollTop","currentLeft","newLeft","right","innerWidth","maxScrollLeft","event","updateContainerScroll","mouseMoveStarted","mouseMoved","mouseDownData","SelectableGroup_assertThisInitialized","_ref2","pointY","pointX","setState","abs","updateSelecting","duringSelection","selectboxNode","getRef","selectboxBounds","selectItems","_objectSpread","options","_this$props2","enableDeselect","mixedDeselect","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","item","processItem","isFromClick","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","onSelectionClear","updateWhiteListNodes","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","isInIgnoreList","e","isNotLeftButtonClick","buttonNumber","buttons","which","button","detectMouseButton","mouseDownStarted","disabled","resetOnStart","mouseUpStarted","globalMouse","selectableGroup","offsetData","pageY","pageX","updateRootBounds","updateRegistry","preventDefault","addEventListener","updateSelectBox","mouseUp","removeTempEventListeners","handleClick","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","clear","preventEvent","toggleSelectionMode","cleanUp","keyCode","unregisterSelectable","querySelector","mouseDown","deselectOnEsc","keyListener","removeEventListener","scrollHeight","clientHeight","scrollWidth","clientWidth","size","isCollided","bounds","_item$state","clickedItem","selectionStarted","deselected","deselectionStarted","canSelect","has","ignoreCheckCache","shouldBeIgnored","ignoreListNodes","some","ignoredNode","contains","set","Array","from","querySelectorAll","join","preventHandler","stopPropagation","_this$props3","clickClassName","allowClickWithoutSelected","classNames","classList","isMouseUpOnClickElement","indexOf","ctrlKey","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_this$props4","_this$props4$componen","component","GroupComponent","selectionModeClass","selectboxClassName","children","Context","Provider","contextValue","getGroupRef","assign","defaultContainerStyle","src_Selectbox","createSelectable","WrappedComponent","_class","_temp","_Component","SelectableItem","_getPrototypeOf2","CreateSelectable_classCallCheck","_len","args","_key","CreateSelectable_getPrototypeOf","apply","CreateSelectable_defineProperty","CreateSelectable_assertThisInitialized","context","CreateSelectable_inherits","_extends","selectableRef","getSelectableRef","SelectAllButton","_this$props$component","ButtonComponent","_this$props$className","rest","_objectWithoutProperties","SelectAll_extends","getRootRef","onClick","DeselectAllButton","DeselectAll_objectWithoutProperties","DeselectAll_extends","__webpack_exports__","Selectable_types","src_SelectableGroup","CreateSelectable","SelectAll","DeselectAll"],"mappings":"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","file":"react-selectable-fast.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"React-Selectable-Fast\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"React-Selectable-Fast\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import { MouseEvent } from 'react'\n\nconst propertiesToNormalize = ['pageX', 'pageY', 'clientX', 'clientY']\n\nfunction patchEventProperties(evt: any, touchKey: string) {\n  propertiesToNormalize.forEach(key => {\n    if (typeof evt[key] === 'undefined') {\n      evt[key] = evt[touchKey][0][key]\n    }\n  })\n}\n\n/**\n * Used to return event object with desktop (non-touch) format of event\n * coordinates, regardless of whether the action is from mobile or desktop.\n */\nexport function castTouchToMouseEvent(evt: any): MouseEvent<HTMLElement> {\n  if (evt.type.includes('mouse')) {\n    return evt\n  }\n\n  try {\n    if (evt.type === 'touchstart') {\n      patchEventProperties(evt, 'targetTouches')\n    } else if (evt.type === 'touchmove') {\n      patchEventProperties(evt, 'changedTouches')\n    }\n  } catch (err) {\n    alert(err.message)\n  }\n\n  return evt as MouseEvent<HTMLElement>\n}\n","export type TGetBoundsForNodeArgs = {\n  scrollTop: number\n  scrollLeft: number\n}\n\nexport type TComputedBounds = {\n  top: number\n  left: number\n  width: number\n  height: number\n  offsetWidth: number\n  offsetHeight: number\n}\n\nexport function getDocumentScroll() {\n  const documentScrollTop = Math.max(\n    window.pageYOffset,\n    document.documentElement.scrollTop,\n    document.body.scrollTop\n  )\n\n  const documentScrollLeft = Math.max(\n    window.pageXOffset,\n    document.documentElement.scrollLeft,\n    document.body.scrollLeft\n  )\n\n  return { documentScrollTop, documentScrollLeft }\n}\n\n/**\n * Given a node, get everything needed to calculate its boundaries\n */\nexport function getBoundsForNode(\n  node: HTMLElement,\n  containerScroll: TGetBoundsForNodeArgs = { scrollTop: 0, scrollLeft: 0 }\n) {\n  const { scrollTop, scrollLeft } = containerScroll\n  const { documentScrollTop, documentScrollLeft } = getDocumentScroll()\n\n  const rect = node.getBoundingClientRect()\n\n  return {\n    top: rect.top + documentScrollTop + scrollTop,\n    left: rect.left + documentScrollLeft + scrollLeft,\n    offsetWidth: node.offsetWidth,\n    offsetHeight: node.offsetHeight,\n    width: rect.width,\n    height: rect.height\n  }\n}\n","import { getBoundsForNode, TComputedBounds } from './getBoundsForNode'\n\ntype TAreBoundsCollideOptions = {\n  tolerance?: number\n  useOffsetSize?: boolean\n}\n\n/**\n * Given offsets, widths, and heights of two objects, determine if they collide (overlap).\n */\nconst areBoundsCollide = (\n  a: TComputedBounds,\n  b: TComputedBounds,\n  { tolerance = 0, useOffsetSize = false }: TAreBoundsCollideOptions\n) => {\n  const aHeight = useOffsetSize ? a.offsetHeight : a.height\n  const bHeight = useOffsetSize ? b.offsetHeight : b.height\n\n  const aWidth = useOffsetSize ? a.offsetWidth : a.width\n  const bWidth = useOffsetSize ? b.offsetWidth : b.width\n\n  return !(\n    a.top + aHeight - tolerance < b.top ||\n    // 'a' top doesn't touch 'b' bottom\n    a.top + tolerance > b.top + bHeight ||\n    // 'a' right doesn't touch 'b' left\n    a.left + aWidth - tolerance < b.left ||\n    // 'a' left doesn't touch 'b' right\n    a.left + tolerance > b.left + bWidth\n  )\n}\n\n/**\n * Given two objects containing \"top\", \"left\", \"offsetWidth\" and \"offsetHeight\"\n * properties, determine if they collide.\n */\nexport function doObjectsCollide(\n  a: HTMLElement | TComputedBounds,\n  b: HTMLElement | TComputedBounds,\n  tolerance: number = 0,\n  delta: number = 1\n) {\n  const aObj = a instanceof HTMLElement ? getBoundsForNode(a) : a\n  const bObj = b instanceof HTMLElement ? getBoundsForNode(b) : b\n\n  return areBoundsCollide(aObj, bObj, { tolerance, useOffsetSize: delta === 1 })\n}\n","export function isNodeInRoot(node: HTMLElement, root: HTMLElement) {\n  while (node) {\n    if (node === root) {\n      return true\n    }\n\n    node = node.parentNode as any\n  }\n\n  return false\n}\n","export const noop = () => {}\nexport type Maybe<T> = T | null\n\nexport * from './castTouchToMouseEvent'\nexport * from './detectMouseButton'\nexport * from './doObjectsCollide'\nexport * from './getBoundsForNode'\nexport * from './nodeInRoot'\n","import React from 'react'\n\nimport { TSelectableGroupContext, TSelectableItem } from './Selectable.types'\nimport { noop } from './utils'\n\nconst SelectableGroupContext = React.createContext<TSelectableGroupContext>({\n  selectable: {\n    register(_: TSelectableItem) {},\n    unregister(_: TSelectableItem) {},\n    selectAll: noop,\n    clearSelection: noop,\n    getScrolledContainer: () => null\n  }\n})\n\nexport default SelectableGroupContext\n","import React, { Component, CSSProperties } from 'react'\n\ntype TSelectboxProps = {\n  fixedPosition: boolean\n  className: string\n}\n\nclass Selectbox extends Component<TSelectboxProps> {\n  static defaultProps = {\n    className: 'selectable-selectbox'\n  }\n\n  state = {\n    y: 0,\n    x: 0,\n    width: 0,\n    height: 0,\n    isSelecting: false\n  }\n\n  selectbox: HTMLDivElement | null = null\n\n  getRef = () => this.selectbox\n\n  getSelectboxRef = (ref: HTMLDivElement | null) => {\n    this.selectbox = ref\n  }\n\n  render() {\n    const { fixedPosition, className } = this.props\n\n    const boxStyle: CSSProperties = {\n      left: this.state.x,\n      top: this.state.y,\n      width: this.state.width,\n      height: this.state.height,\n      zIndex: 9000,\n      position: fixedPosition ? 'fixed' : 'absolute',\n      cursor: 'default'\n    }\n\n    return (\n      <div>\n        {this.state.isSelecting && (\n          <div ref={this.getSelectboxRef} style={boxStyle} className={className} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Selectbox\n","import React, { Component, MouseEvent } from 'react'\nimport { ReactComponentLike } from 'prop-types'\n\nimport {\n  castTouchToMouseEvent,\n  detectMouseButton,\n  doObjectsCollide,\n  getBoundsForNode,\n  isNodeInRoot,\n  noop,\n  Maybe,\n  TComputedBounds\n} from './utils'\nimport { TSelectableItem } from './Selectable.types'\nimport SelectableGroupContext from './Context'\nimport Selectbox from './Selectbox'\n\ntype TSelectItemsOptions = {\n  isFromClick?: boolean\n}\n\ntype TMouseDownData = {\n  selectboxY: number\n  selectboxX: number\n  target: HTMLElement | null\n}\n\ntype TProcessItemOptions = TSelectItemsOptions & {\n  item: TSelectableItem\n  tolerance: number\n  selectboxBounds: TComputedBounds\n  enableDeselect: boolean\n  mixedDeselect: boolean\n}\n\nexport type TSelectableGroupProps = {\n  globalMouse?: boolean\n  ignoreList?: string[]\n  scrollSpeed?: number\n  minimumSpeedFactor?: number\n  allowClickWithoutSelected?: boolean\n  className?: string\n  clickClassName?: string\n  selectboxClassName?: string\n  style?: object\n  selectionModeClass?: string\n  onSelectionClear?: Function\n  enableDeselect?: boolean\n  mixedDeselect?: boolean\n  deselectOnEsc?: boolean\n  resetOnStart?: boolean\n  disabled?: boolean\n  delta?: number\n  /**\n   * Scroll container selector\n   */\n  scrollContainer?: string\n\n  /**\n   * Event that will fire rapidly during selection (while the selector is\n   * being dragged). Passes an array of keys.\n   */\n  duringSelection?: Function\n\n  /**\n   * Event that will fire when items are selected. Passes an array of keys.\n   */\n  onSelectionFinish?: Function\n\n  /**\n   * The component that will represent the Selectable DOM node\n   */\n  component?: ReactComponentLike\n\n  /**\n   * Amount of forgiveness an item will offer to the selectbox before registering\n   * a selection, i.e. if only 1px of the item is in the selection, it shouldn't be\n   * included.\n   */\n  tolerance?: number\n\n  /**\n   * In some cases, it the bounding box may need fixed positioning, if your layout\n   * is relying on fixed positioned elements, for instance.\n   * @type boolean\n   */\n  fixedPosition?: boolean\n}\n\nclass SelectableGroup extends Component<TSelectableGroupProps> {\n  static defaultProps = {\n    clickClassName: '',\n    tolerance: 0,\n    globalMouse: false,\n    ignoreList: [],\n    scrollSpeed: 0.25,\n    minimumSpeedFactor: 60,\n    duringSelection: noop,\n    onSelectionFinish: noop,\n    onSelectionClear: noop,\n    allowClickWithoutSelected: true,\n    selectionModeClass: 'in-selection-mode',\n    resetOnStart: false,\n    disabled: false,\n    deselectOnEsc: true,\n    fixedPosition: false,\n    delta: 1\n  }\n\n  state = { selectionMode: false }\n\n  mouseDownStarted = false\n  mouseMoveStarted = false\n  mouseMoved = false\n  mouseUpStarted = false\n  selectionStarted = false\n  deselectionStarted = false\n  clickedItem?: TSelectableItem\n  mouseDownData: TMouseDownData = {\n    selectboxY: 0,\n    selectboxX: 0,\n    target: null\n  }\n\n  registry = new Set<TSelectableItem>()\n  selectedItems = new Set<TSelectableItem>()\n  selectingItems = new Set<TSelectableItem>()\n  ignoreCheckCache = new Map<HTMLElement, Boolean>()\n  ignoreList = this.props.ignoreList!.concat(['.selectable-select-all', '.selectable-deselect-all'])\n  ignoreListNodes: HTMLElement[] = []\n\n  selectbox: Maybe<Selectbox> = null\n  selectableGroup: Maybe<HTMLElement> = null\n  scrollContainer: Maybe<HTMLElement> = null\n\n  maxScrollTop: number = 0\n  maxScrollLeft: number = 0\n  scrollBounds: Maybe<DOMRect | ClientRect> = null\n\n  componentDidMount() {\n    if (this.props.scrollContainer) {\n      this.scrollContainer = document.querySelector(this.props.scrollContainer)\n    } else {\n      this.scrollContainer = this.selectableGroup\n    }\n\n    this.selectableGroup!.addEventListener('mousedown', this.mouseDown)\n    this.selectableGroup!.addEventListener('touchstart', this.mouseDown)\n\n    if (this.props.deselectOnEsc) {\n      document.addEventListener('keydown', this.keyListener)\n      document.addEventListener('keyup', this.keyListener)\n    }\n  }\n\n  componentWillUnmount() {\n    this.selectableGroup!.removeEventListener('mousedown', this.mouseDown)\n    this.selectableGroup!.removeEventListener('touchstart', this.mouseDown)\n\n    if (this.props.deselectOnEsc) {\n      document.removeEventListener('keydown', this.keyListener)\n      document.removeEventListener('keyup', this.keyListener)\n    }\n\n    this.removeTempEventListeners()\n  }\n\n  removeTempEventListeners() {\n    document.removeEventListener('mousemove', this.updateSelectBox)\n    document.removeEventListener('touchmove', this.updateSelectBox)\n    document.removeEventListener('mouseup', this.mouseUp)\n    document.removeEventListener('touchend', this.mouseUp)\n  }\n\n  updateRootBounds() {\n    this.scrollBounds = this.scrollContainer!.getBoundingClientRect()\n    this.maxScrollTop = this.scrollContainer!.scrollHeight - this.scrollContainer!.clientHeight\n    this.maxScrollLeft = this.scrollContainer!.scrollWidth - this.scrollContainer!.clientWidth\n  }\n\n  updateRegistry = () => {\n    const containerScroll = {\n      scrollTop: this.scrollContainer!.scrollTop,\n      scrollLeft: this.scrollContainer!.scrollLeft\n    }\n\n    for (const selectableItem of this.registry.values()) {\n      selectableItem.registerSelectable(containerScroll)\n    }\n  }\n\n  registerSelectable = (selectableItem: TSelectableItem) => {\n    this.registry.add(selectableItem)\n    if (selectableItem.state.isSelected) {\n      this.selectedItems.add(selectableItem)\n    }\n  }\n\n  unregisterSelectable = (selectableItem: TSelectableItem) => {\n    this.registry.delete(selectableItem)\n    this.selectedItems.delete(selectableItem)\n    this.selectingItems.delete(selectableItem)\n\n    this.props.onSelectionFinish!([...this.selectedItems])\n  }\n\n  toggleSelectionMode() {\n    const {\n      selectedItems,\n      state: { selectionMode }\n    } = this\n\n    if (selectedItems.size && !selectionMode) {\n      this.setState({ selectionMode: true })\n    }\n    if (!selectedItems.size && selectionMode) {\n      this.setState({ selectionMode: false })\n    }\n  }\n\n  private updateContainerScroll = (evt: MouseEvent<HTMLElement>) => {\n    const { scrollTop, scrollLeft } = this.scrollContainer!\n\n    this.checkScrollTop(evt.clientY, scrollTop)\n    this.checkScrollBottom(evt.clientY, scrollTop)\n    this.checkScrollLeft(evt.clientX, scrollLeft)\n    this.checkScrollRight(evt.clientX, scrollLeft)\n  }\n\n  getScrollStep = (offset: number) => {\n    const { minimumSpeedFactor, scrollSpeed } = this.props\n\n    return Math.max(offset, minimumSpeedFactor!) * scrollSpeed!\n  }\n\n  checkScrollTop = (clientY: number, currentTop: number) => {\n    const offset = this.scrollBounds!.top - clientY\n\n    if (offset > 0 || clientY < 0) {\n      this.scrollContainer!.scrollTop = currentTop - this.getScrollStep(offset)\n    }\n  }\n\n  checkScrollBottom = (clientY: number, currentTop: number) => {\n    const offset = clientY - this.scrollBounds!.bottom\n\n    if (offset > 0 || clientY > window.innerHeight) {\n      const newTop = currentTop + this.getScrollStep(offset)\n      this.scrollContainer!.scrollTop = Math.min(newTop, this.maxScrollTop)\n    }\n  }\n\n  checkScrollLeft = (clientX: number, currentLeft: number) => {\n    const offset = this.scrollBounds!.left - clientX\n\n    if (offset > 0 || clientX < 0) {\n      const newLeft = currentLeft - this.getScrollStep(offset)\n      this.scrollContainer!.scrollLeft = newLeft\n    }\n  }\n\n  checkScrollRight = (clientX: number, currentLeft: number) => {\n    const offset = clientX - this.scrollBounds!.right\n\n    if (offset > 0 || clientX > window.innerWidth) {\n      const newLeft = currentLeft + this.getScrollStep(offset)\n      this.scrollContainer!.scrollLeft = Math.min(newLeft, this.maxScrollLeft)\n    }\n  }\n\n  updateSelectBox = (event: Event) => {\n    const evt = castTouchToMouseEvent(event)\n    this.updateContainerScroll(evt as MouseEvent<HTMLElement>)\n\n    if (this.mouseMoveStarted) {\n      return\n    }\n    this.mouseMoveStarted = true\n    this.mouseMoved = true\n\n    const { mouseDownData } = this\n    const { clientX, clientY } = evt\n    const { scrollLeft, scrollTop } = this.scrollContainer!\n\n    const pointY = clientY - this.scrollBounds!.top + scrollTop\n    const selectboxY = Math.min(pointY, mouseDownData.selectboxY)\n\n    const pointX = clientX - this.scrollBounds!.left + scrollLeft\n    const selectboxX = Math.min(pointX, mouseDownData.selectboxX)\n\n    this.selectbox!.setState(\n      {\n        x: selectboxX,\n        y: selectboxY,\n        isSelecting: true,\n        width: Math.abs(pointX - mouseDownData.selectboxX),\n        height: Math.abs(pointY - mouseDownData.selectboxY)\n      },\n      () => {\n        this.updateSelecting()\n        this.props.duringSelection!([...this.selectingItems])\n        this.mouseMoveStarted = false\n      }\n    )\n  }\n\n  updateSelecting = () => {\n    const selectboxNode = this.selectbox!.getRef()\n    if (!selectboxNode) {\n      return\n    }\n\n    const selectboxBounds = getBoundsForNode(selectboxNode)\n\n    this.selectItems({\n      ...selectboxBounds,\n      offsetWidth: selectboxBounds.offsetWidth || 1,\n      offsetHeight: selectboxBounds.offsetHeight || 1\n    })\n  }\n\n  selectItems = (selectboxBounds: TComputedBounds, options: TSelectItemsOptions = {}) => {\n    const { tolerance, enableDeselect, mixedDeselect } = this.props\n\n    selectboxBounds.top += this.scrollContainer!.scrollTop\n    selectboxBounds.left += this.scrollContainer!.scrollLeft\n\n    for (const item of this.registry.values()) {\n      this.processItem({\n        item,\n        selectboxBounds,\n        tolerance: tolerance!,\n        mixedDeselect: mixedDeselect!,\n        enableDeselect: enableDeselect!,\n        isFromClick: options && options.isFromClick\n      })\n    }\n  }\n\n  processItem(options: TProcessItemOptions) {\n    const { item, tolerance, selectboxBounds, enableDeselect, mixedDeselect, isFromClick } = options\n\n    if (this.isInIgnoreList(item.node)) {\n      return null\n    }\n\n    const isCollided = doObjectsCollide(selectboxBounds, item.bounds!, tolerance, this.props.delta)\n    const { isSelecting, isSelected } = item.state\n\n    if (isFromClick && isCollided) {\n      if (isSelected) {\n        this.selectedItems.delete(item)\n      } else {\n        this.selectedItems.add(item)\n      }\n\n      item.setState({ isSelected: !isSelected })\n\n      return (this.clickedItem = item)\n    }\n\n    if (!isFromClick && isCollided) {\n      if (isSelected && enableDeselect && (!this.selectionStarted || mixedDeselect)) {\n        item.setState({ isSelected: false })\n        item.deselected = true\n\n        this.deselectionStarted = true\n\n        return this.selectedItems.delete(item)\n      }\n\n      const canSelect = mixedDeselect ? !item.deselected : !this.deselectionStarted\n\n      if (!isSelecting && !isSelected && canSelect) {\n        item.setState({ isSelecting: true })\n\n        this.selectionStarted = true\n        this.selectingItems.add(item)\n\n        return { updateSelecting: true }\n      }\n    }\n\n    if (!isFromClick && !isCollided && isSelecting) {\n      if (this.selectingItems.has(item)) {\n        item.setState({ isSelecting: false })\n\n        this.selectingItems.delete(item)\n\n        return { updateSelecting: true }\n      }\n    }\n\n    return null\n  }\n\n  clearSelection = () => {\n    for (const item of this.selectedItems.values()) {\n      item.setState({ isSelected: false })\n      this.selectedItems.delete(item)\n    }\n\n    this.setState({ selectionMode: false })\n    this.props.onSelectionFinish!([...this.selectedItems])\n    this.props.onSelectionClear!()\n  }\n\n  selectAll = () => {\n    this.updateWhiteListNodes()\n\n    for (const item of this.registry.values()) {\n      if (!this.isInIgnoreList(item.node) && !item.state.isSelected) {\n        item.setState({ isSelected: true })\n        this.selectedItems.add(item)\n      }\n    }\n\n    this.setState({ selectionMode: true })\n    this.props.onSelectionFinish!([...this.selectedItems])\n  }\n\n  isInIgnoreList(target: HTMLElement | null) {\n    if (!target) {\n      return\n    }\n\n    if (this.ignoreCheckCache.get(target) !== undefined) {\n      return this.ignoreCheckCache.get(target)\n    }\n\n    const shouldBeIgnored = this.ignoreListNodes.some(\n      ignoredNode => target === ignoredNode || ignoredNode.contains(target)\n    )\n\n    this.ignoreCheckCache.set(target, shouldBeIgnored)\n\n    return shouldBeIgnored\n  }\n\n  updateWhiteListNodes() {\n    this.ignoreListNodes = Array.from(document.querySelectorAll(this.ignoreList.join(', ')))\n  }\n\n  mouseDown = (e: Event) => {\n    const isNotLeftButtonClick = !e.type.includes('touch') && !detectMouseButton(e as any, 1)\n    if (this.mouseDownStarted || this.props.disabled || isNotLeftButtonClick) {\n      return\n    }\n\n    this.updateWhiteListNodes()\n\n    if (this.isInIgnoreList(e.target as HTMLElement)) {\n      this.mouseDownStarted = false\n\n      return\n    }\n\n    if (this.props.resetOnStart) {\n      this.clearSelection()\n    }\n    this.mouseDownStarted = true\n    this.mouseUpStarted = false\n    const evt = castTouchToMouseEvent(e)\n\n    if (!this.props.globalMouse && !isNodeInRoot(evt.target as any, this.selectableGroup!)) {\n      const offsetData = getBoundsForNode(this.selectableGroup!)\n      const collides = doObjectsCollide(\n        {\n          top: offsetData.top,\n          left: offsetData.left,\n          width: 0,\n          height: 0,\n          offsetHeight: offsetData.offsetHeight,\n          offsetWidth: offsetData.offsetWidth\n        },\n        {\n          top: evt.pageY,\n          left: evt.pageX,\n          width: 0,\n          height: 0,\n          offsetWidth: 0,\n          offsetHeight: 0\n        }\n      )\n\n      if (!collides) {\n        return\n      }\n    }\n\n    this.updateRootBounds()\n    this.updateRegistry()\n\n    this.mouseDownData = {\n      target: evt.target as HTMLElement,\n      selectboxY: evt.clientY - this.scrollBounds!.top + this.scrollContainer!.scrollTop,\n      selectboxX: evt.clientX - this.scrollBounds!.left + this.scrollContainer!.scrollLeft\n    }\n\n    evt.preventDefault()\n\n    document.addEventListener('mousemove', this.updateSelectBox)\n    document.addEventListener('touchmove', this.updateSelectBox)\n    document.addEventListener('mouseup', this.mouseUp)\n    document.addEventListener('touchend', this.mouseUp)\n  }\n\n  preventEvent(target: HTMLElement, type: string) {\n    const preventHandler = (evt: Event) => {\n      target.removeEventListener(type, preventHandler, true)\n      evt.preventDefault()\n      evt.stopPropagation()\n    }\n    target.addEventListener(type, preventHandler, true)\n  }\n\n  private mouseUp = (event: Event) => {\n    if (this.mouseUpStarted) {\n      return\n    }\n\n    this.mouseUpStarted = true\n    this.mouseDownStarted = false\n    this.removeTempEventListeners()\n\n    if (!this.mouseDownData) {\n      return\n    }\n\n    const evt: any = castTouchToMouseEvent(event)\n    const { pageX, pageY } = evt\n\n    if (!this.mouseMoved && isNodeInRoot(evt.target as HTMLElement, this.selectableGroup!)) {\n      this.handleClick(evt, pageY, pageX)\n    } else {\n      for (const item of this.selectingItems.values()) {\n        item.setState({ isSelected: true, isSelecting: false })\n      }\n      this.selectedItems = new Set([...this.selectedItems, ...this.selectingItems])\n      this.selectingItems.clear()\n\n      if (evt.which === 1 && this.mouseDownData.target === evt.target) {\n        this.preventEvent(evt.target, 'click')\n      }\n\n      this.selectbox!.setState({\n        isSelecting: false,\n        width: 0,\n        height: 0\n      })\n      this.props.onSelectionFinish!([...this.selectedItems])\n    }\n\n    this.toggleSelectionMode()\n    this.cleanUp()\n    this.mouseMoved = false\n  }\n\n  handleClick(evt: any, top: number, left: number) {\n    const { clickClassName, allowClickWithoutSelected, onSelectionFinish } = this.props\n    const classNames = (evt.target as HTMLElement).classList || []\n    const isMouseUpOnClickElement = Array.from(classNames).indexOf(clickClassName!) > -1\n\n    if (\n      allowClickWithoutSelected ||\n      this.selectedItems.size ||\n      isMouseUpOnClickElement ||\n      evt.ctrlKey\n    ) {\n      this.selectItems(\n        {\n          top,\n          left,\n          width: 0,\n          height: 0,\n          offsetWidth: 0,\n          offsetHeight: 0\n        },\n        { isFromClick: true }\n      )\n\n      onSelectionFinish!([...this.selectedItems], this.clickedItem)\n\n      if (evt.which === 1) {\n        this.preventEvent(evt.target, 'click')\n      }\n      if (evt.which === 2 || evt.which === 3) {\n        this.preventEvent(evt.target, 'contextmenu')\n      }\n    }\n  }\n\n  keyListener = (evt: KeyboardEvent) => {\n    if (evt.keyCode === 27) {\n      // escape\n      this.clearSelection()\n    }\n  }\n\n  cleanUp() {\n    this.deselectionStarted = false\n    this.selectionStarted = false\n\n    if (this.props.mixedDeselect) {\n      for (const item of this.registry.values()) {\n        item.deselected = false\n      }\n    }\n  }\n\n  getGroupRef = (ref: HTMLElement | null) => {\n    this.selectableGroup = ref\n  }\n\n  getSelectboxRef = (ref: Selectbox | null) => {\n    this.selectbox = ref\n  }\n\n  defaultContainerStyle = {\n    position: 'relative'\n  }\n\n  contextValue = {\n    selectable: {\n      register: this.registerSelectable,\n      unregister: this.unregisterSelectable,\n      selectAll: this.selectAll,\n      clearSelection: this.clearSelection,\n      getScrolledContainer: () => this.scrollContainer\n    }\n  }\n\n  render() {\n    const { selectionMode } = this.state\n    const {\n      component: GroupComponent = 'div',\n      className,\n      style,\n      selectionModeClass,\n      fixedPosition,\n      selectboxClassName,\n      children\n    } = this.props\n\n    return (\n      <SelectableGroupContext.Provider value={this.contextValue}>\n        <GroupComponent\n          ref={this.getGroupRef}\n          style={Object.assign({}, this.defaultContainerStyle, style)}\n          className={`${className} ${selectionMode ? selectionModeClass : ''}`}\n        >\n          <Selectbox\n            ref={this.getSelectboxRef}\n            className={selectboxClassName}\n            fixedPosition={fixedPosition!}\n          />\n          {children}\n        </GroupComponent>\n      </SelectableGroupContext.Provider>\n    )\n  }\n}\n\nexport default SelectableGroup\n","import { MouseEvent } from 'react'\n\n/**\n * @buttonNumber\n * 1: Left button\n * 2: Middle/Right button\n * 3: Right/Back button\n */\nexport function detectMouseButton(evt: MouseEvent<HTMLElement>, buttonNumber = 1) {\n  if ('buttons' in evt) {\n    return evt.buttons === buttonNumber\n  }\n\n  if ('which' in evt) {\n    return (evt as KeyboardEvent).which === buttonNumber\n  }\n\n  return (evt as MouseEvent).button === buttonNumber - 1\n}\n","import React, { Component, ComponentType } from 'react'\nimport { bool } from 'prop-types'\n\nimport { getBoundsForNode, TComputedBounds, TGetBoundsForNodeArgs } from './utils'\nimport { TSelectableItemState } from './Selectable.types'\nimport SelectableGroupContext from './Context'\n\nconst createSelectable = (WrappedComponent: ComponentType<any>) =>\n  class SelectableItem extends Component<any, TSelectableItemState> {\n    static contextType = SelectableGroupContext\n\n    static propTypes = {\n      isSelected: bool\n    }\n\n    static defaultProps = {\n      isSelected: false\n    }\n\n    state = {\n      isSelected: this.props.isSelected,\n      isSelecting: false\n    }\n\n    node: HTMLElement | null = null\n    bounds: TComputedBounds | null = null\n\n    componentDidMount() {\n      this.registerSelectable()\n    }\n\n    componentWillUnmount() {\n      this.context.selectable.unregister(this)\n    }\n\n    registerSelectable = (containerScroll?: TGetBoundsForNodeArgs) => {\n      this.bounds = getBoundsForNode(this.node!, containerScroll)\n      this.context.selectable.register(this)\n    }\n\n    getSelectableRef = (ref: HTMLElement | null) => {\n      this.node = ref\n    }\n\n    render() {\n      return (\n        <WrappedComponent {...this.props} {...this.state} selectableRef={this.getSelectableRef} />\n      )\n    }\n  }\n\nexport default createSelectable\n","import React, { Component, ReactNode } from 'react'\nimport { ReactComponentLike } from 'prop-types'\n\nimport SelectableGroupContext from './Context'\n\ntype TSelectAllButton = {\n  children: ReactNode\n  component?: ReactComponentLike\n  className?: string\n  [key: string]: any\n}\n\nclass SelectAllButton extends Component<TSelectAllButton> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component: ButtonComponent = 'div', children, className = '', ...rest } = this.props\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.selectAll}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n\nexport default SelectAllButton\n","import React, { Component, ReactNode } from 'react'\nimport { ReactComponentLike } from 'prop-types'\n\nimport SelectableGroupContext from './Context'\n\ntype TDeselectAllButton = {\n  children: ReactNode\n  component?: ReactComponentLike\n  className?: string\n  [key: string]: any\n}\n\nclass DeselectAllButton extends Component<TDeselectAllButton> {\n  static contextType = SelectableGroupContext\n\n  root: HTMLDivElement | null = null\n\n  componentDidMount() {\n    this.root!.addEventListener('mousedown', (evt: Event) => evt.stopPropagation())\n  }\n\n  getRootRef = (ref: HTMLDivElement | null) => {\n    this.root = ref\n  }\n\n  render() {\n    const { component: ButtonComponent = 'div', children, className, ...rest } = this.props\n\n    return (\n      <ButtonComponent\n        ref={this.getRootRef}\n        className={`selectable-select-all ${className}`}\n        onClick={this.context.selectable.clearSelection}\n        {...rest}\n      >\n        {children}\n      </ButtonComponent>\n    )\n  }\n}\n\nexport default DeselectAllButton\n","import SelectableGroup from './SelectableGroup'\nimport createSelectable from './CreateSelectable'\nimport SelectAll from './SelectAll'\nimport DeselectAll from './DeselectAll'\nimport { TSelectableItemProps } from './Selectable.types'\n\n// As early as possible, check for the existence of the JavaScript globals which\n// package Runtime relies upon, and produce a clear message if they do not exist.\nif (process.env.NODE_ENV === 'development') {\n  if (\n    typeof Map !== 'function' ||\n    typeof Set !== 'function' ||\n    typeof Array.from !== 'function' ||\n    typeof Array.isArray !== 'function' ||\n    typeof Object.assign !== 'function'\n  ) {\n    throw new Error(`\n      React-Selectable-Fast requires Map, Set, Array.from,\n      Array.isArray, and Object.assign to exist.\n      Use a polyfill to provide these for older browsers.\n    `)\n  }\n}\n\nexport { TSelectableItemProps, SelectableGroup, createSelectable, SelectAll, DeselectAll }\n"],"sourceRoot":""}